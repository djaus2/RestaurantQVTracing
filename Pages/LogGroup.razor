@page "/LogGroup"
@page "/LogGroup/{pCurrentPin}/{pRestaurantId}/{pTable}"

@using Newtonsoft.Json;
@using System;
@using System.Data;
@using System.ComponentModel.DataAnnotations;
@using TableTracewithQRCode.Data;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Text;

@inject NavigationManager navigationManager
@inject TableTracewithQRCode.Data.HomeController  homeController

@inject HttpClient client
@inject IJSRuntime JsRuntime

@using AspNetMonsters.Blazor.Geolocation
@inject LocationService  LocationService




<h2>Restaurant Contact Tracing</h2>
<h1>Log My Table</h1>

@if (restaurant != null)
{
    <h1>@restaurant.Name</h1>

    <br />

    <EditForm OnValidSubmit=@OnValidSubmit Model="@tableTrace">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label><b>Table: <i>@tableTrace.Table</i></b></label>
        </div>
        <div class="form-group" style="display: none">
            <label for="RestaurantId">RestaurantId</label>
            <InputNumber @bind-Value=tableTrace.RestaurantId class="form-control" id="Restaurant" PlaceHolder="Please enter a first name at least." />
            <ValidationMessage For="@(() => tableTrace.RestaurantId)" />
        </div>
        <div class="form-group">
            <label for="Name">Your Name</label>
            <InputText @bind-Value=tableTrace.Name class="form-control" id="Name" PlaceHolder="Please enter a first name at least." />
            <ValidationMessage For="@(() => tableTrace.Name)" />
        </div>
        <div class="form-group">
            <label for="OtherNames">Other Names</label>
            <InputText @bind-Value=tableTrace.OtherNames class="form-control" id="OtherNames" PlaceHolder="Please enter a first name at least." />
            <ValidationMessage For="@(() => tableTrace.OtherNames)" />
        </div>
        <div class="form-group">
            <label for="NumInGroup">Number in Group</label>
            <InputNumber @bind-Value=tableTrace.NumInGroup class="form-control" id="Restaurant" PlaceHolder="Please enter a first name at least." />
            <ValidationMessage For="@(() => tableTrace.NumInGroup)" />
        </div>
        <div class="form-group">
            <label for="Age">Your Mobile Number</label><br />
            <InputText @bind-Value=tableTrace.PhoneNumber class="form-control" id="Mobile" PlaceHolder="Please enter a valid mobile number, eg 0456789123" />
            <ValidationMessage For="@(() => tableTrace.PhoneNumber)" />
        </div>
        <input type="submit" class="btn btn-primary" value="Log Me" /> &nbsp; By submitting this you undertake to contaact others if required.
    </EditForm>
    <h3>You are here</h3>
    <div>
        Lat: @location?.Latitude <br />
        Long: @location?.Longitude <br />
        Accuracy: @location?.Accuracy <br />
    </div>
}
else
{
    <img src="./basicloader.gif" />
}
@code {
    [Parameter]
    public string pCurrentPin { get; set; } = "";
    [Parameter]
    public string pRestaurantId { get; set; } = "";
    [Parameter]
    public string pTable { get; set; } = "";


    string OtherNames { get; set; }
    Restaurant restaurant { get; set; }


    public int mode { get; set; } = 1;

    TableTrace tableTrace = new TableTrace();
    string PhoneText { get; set; } = "04";
    string Club { get; set; } = "";
    string Output { get; set; } = "";
    string error { get; set; }

    bool showGif = false;

    int Pin = 0;

    HttpClient Http;

    void LogOut()
    {

    }

    Location location = null;

    protected async Task GetLocation()
    {
        location = await LocationService.GetLocationAsync();
        this.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            base.OnAfterRender(first);
            await GetLocation();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        int CurrentPin;
        int restaurantId;
        int table;
        Http = new HttpClient();
        await base.OnInitializedAsync();

        if (string.IsNullOrEmpty(pCurrentPin))
        {
            navigationManager.NavigateTo("/");
        }
        if (string.IsNullOrEmpty(pRestaurantId))
        {
            navigationManager.NavigateTo("/");
        }
        if (string.IsNullOrEmpty(pTable))
        {
            navigationManager.NavigateTo("/");
        }
        if (!int.TryParse(pCurrentPin, out CurrentPin))
        {
            navigationManager.NavigateTo("/");
        }
        if (!int.TryParse(pRestaurantId, out restaurantId))
        {
            navigationManager.NavigateTo("/");
        }
        if (!int.TryParse(pTable, out table))
        {
            navigationManager.NavigateTo("/");
        }
        //if (homeController.GetState())
        //{
        //    homeController.LogOut();
        //}
        Pin = homeController.Pin;
        if (CurrentPin != Pin)
        {
            navigationManager.NavigateTo("/");
        }
        restaurant = await client.GetFromJsonAsync<Restaurant>($"{Settings.RestaurantsPath}/{restaurantId}");
        tableTrace.Table = table;
        tableTrace.RestaurantId = restaurantId;
        tableTrace.NumInGroup = 1;
    }


    //void OnValidSubmit(EditContext editContext)
    async Task OnValidSubmit()
    {
        error = null;
        try
        {
            showGif = true;
            StateHasChanged();

            int pin = homeController.Pin;
            string name = tableTrace.Name;
            string phone = tableTrace.PhoneNumber;
            if (!CheckDetails(tableTrace))
            {
                showGif = false;
                await JsRuntime.InvokeAsync<bool>("alert", "Invalid entry: Need Correct Numbner of Names and valid Mobile.");
                return;
            }
            homeController.Authenticate(name, phone);
            //TableTrace tableTrace = new TableTrace { Name = name, PhoneNumber = phone, Date = DateTime.Now, Email = "a@b.c.com", Mode = mode, Pin = Pin };
            //tableTrace.Table = Table;
            if (location != null)
            {
                //MS SQL serer truncates decimal to 2 decimal digits
                //Ref: https://mattferderer.com/entity-framework-no-type-was-specified-for-the-decimal-column
                decimal? latitude = location?.Latitude * 1000000;
                decimal? longitute = location?.Longitude * 1000000;
                decimal? accuracy = location?.Accuracy * 1000000;
                tableTrace.Latitude = latitude;
                tableTrace.Longitude = longitute;
                tableTrace.Accuracy = accuracy;
            }

            //One way of sending sending tableTrace
            //var content = new StringContent(
            //    JsonConvert.SerializeObject(tableTrace),
            //    Encoding.UTF8,
            //    "application/json");
            //var response1 = await client.PostAsync($"{Settings.baseURL}", content);

            //Simpler coding. May need previous method for more complex serialisations.
            var response2 = await client.PostAsJsonAsync<TableTrace>($"{Settings.TableTracesPath}", tableTrace);

            var traces = await client.GetFromJsonAsync<TableTrace[]>($"{Settings.TableTracesPath}");


            showGif = false;
            StateHasChanged();
            string target = $"/Thanks/{pin}";
            navigationManager.NavigateTo(target);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    /// <summary>
    /// Check for a vali mobile number
    /// Can enter a local landline
    /// Can enter an email address
    /// </summary>
    /// <param name="name"></param>
    /// <param name="phone"></param>
    /// <returns></returns>
    bool CheckDetails(TableTrace tableTrace)
    {
        var names = tableTrace.OtherNames.Split(new char[] { ',', ' ' });
        if (names.Length < (tableTrace.NumInGroup-1))
            return false;
        if (tableTrace == null)
            return false;
        if (string.IsNullOrEmpty(tableTrace.Name))
            return false;
        if (string.IsNullOrEmpty(tableTrace.PhoneNumber))
            return false;

        //Validate Mobile
        //0400000000 to 0499999999
        long MobileNo;
        if (long.TryParse(tableTrace.PhoneNumber, out MobileNo))
        {
            if (MobileNo >= 0400000000)
            {
                if (MobileNo <= 0499999999)
                {
                    return true;
                }
            }
            if (MobileNo >= 90000000)
            {
                if (MobileNo <= 99999999)
                {
                    return true;
                }
            }
        }
        var foo = new EmailAddressAttribute();
        if (foo.IsValid("phone"))
            return true;

        return true;
    }
}


