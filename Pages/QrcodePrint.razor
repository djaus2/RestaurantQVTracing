@layout AltLayout
@page "/QRCodeprint"
@page "/QRCodeprint/{int:restId}{tables}"
@using QRCoder;
@using System.Drawing;
@using System.Drawing.Imaging;
@using System.IO;
@using System.Threading;
@using System.Threading.Tasks;

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject TableTracewithQRCode.Data.HomeController  homeController
@inject NavigationManager navigationManager

@using System.Net.Http;
@using System.Net.Http.Json;
@inject HttpClient client

<h1>&nbsp;Restaurant Table Tracing</h1>
<h2><font size="30">&nbsp;Table QRCodes.</font></h2>
@if (restaurants != null)
{
    <EditForm OnValidSubmit=@OnValidSubmit Model="@restaurant">
        <div class="form-group">
            <label>Vendor:&nbsp;</label>
            <label>@restaurant.Name</label>
        </div>

        <div class="form-group">
            <label for="Vendor">Select Vendor:&nbsp;</label>
            <InputSelect @bind-Value=restaurant.Name>
                @foreach (Restaurant rest in restaurants)
                    {
                    <option value=@rest.Name>@rest.Name</option>
                    }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="tablesRange">Image File Name</label>
            <InputText @bind-Value=restaurant.Image class="form-control" id="Image" PlaceHolder="Please enter Image Filename, if one." />
        </div>
        <div class="form-group">
            <label for="tablesRange">Tables List</label>
            <InputText @bind-Value=restaurant.TablesCSV class="form-control" id="Tables" PlaceHolder="Please enter list of table numbers as CSV List." />
        </div>
        <div class="form-group">
            <label for="tablesRange">URL</label>
            <InputText @bind-Value=restaurant.bitly class="form-control" id="Tables" PlaceHolder="Please enter Log site URL" />
        </div>
        <input type="submit" class="btn btn-primary" value="Generate Tables" />
    </EditForm>
    <p></p>
    <p><b><u><i><font color="blue">Instructions:</font></i></u>&nbsp;Enter details and then [Generate]. Then print tables. It wil print 4 per page.</b></p>
    <hr />
    <h5>&nbsp;</h5>

    @if (restaurant != null)
    {
        @if (restaurant.QRTables != null)
        {
            <table border="1" width="1200">
                @for (int ii = 0; ii < restaurant.QRTables.Count(); ii += 2)
                //@foreach (var qr in restaurant.QRTables)
                {
                    <tr>
                        <td>
                            <h1>&nbsp;@restaurant.QRTables[ii].Name</h1>
                            <h1>&nbsp;Table: @restaurant.QRTables[ii].Table</h1>
                            <h3>&nbsp;Please log your attendance here.</h3>
                            &nbsp;Now a mandatory requirement due to COVID-19.<br />
                            &nbsp;Use the QR Code to access the site: Site it in your phone's camera. <br />
                            &nbsp;Or enter the following URL in your phone's browser.
                            <h2>&nbsp;@restaurant.QRTables[ii].BitLy</h2>
                            &nbsp;<img src="@restaurant.QRTables[ii].QRCode" style="width:360px;height:360px;" />
                        </td>
                        <td>
                            <h1>&nbsp;@restaurant.QRTables[ii + 1].Name</h1>
                            <h1>&nbsp;Table: @restaurant.QRTables[ii + 1].Table</h1>
                            <h3>&nbsp;Please log your attendance here.</h3>
                            &nbsp;Now a mandatory requirement due to COVID-19.<br />
                            &nbsp;Use the QR Code to access the site: Site it in your phone's camera. <br />
                            &nbsp;Or enter the following URL in your phone's browser.
                            <h2>&nbsp;@restaurant.QRTables[ii + 1].BitLy</h2>
                            &nbsp;<img src="@restaurant.QRTables[ii+1].QRCode" style="width:360px;height:360px;" />
                        </td>
                    </tr>
                }
                }
            </table>
        }
        else
        {
            <h1>Two</h1>
        }

    }
    else
    {
        <h1>One</h1>
    }
}
else
{
    <h1>Please wait.</h1>
    <img src="./basicloader.gif" />
}

@code{ [Parameter]
    public int? CurrentCount { get; set; }

    public TableTracewithQRCode.Data.Restaurant restaurant { get; set; } = null;

    //public string Tables { get; set; } = "1,3-5,7, 11-14";
    //private List<int> tables { get; set; } = null;

    //private List<QRTable> QRTables { get; set; }

    //List<string> InputTexts { get; set; }
    //string QRCodeStr { get; set; } = "";
    //string bitly { get; set; } = "https://bit.ly/3fnzHij";

    List<Restaurant> restaurants { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        restaurant = new Data.Restaurant { Name = "Hungry Joes", Image = "", TablesCSV = "1,2,3", bitly = Settings.BaseURL };
        restaurant.Name = "Busy: Please wait.";

        var venues = await client.GetFromJsonAsync<Restaurant[]>(Settings.RestaurantsPath);
        restaurants = venues.ToList();


        CurrentCount = CurrentCount ?? 1;
        /*
        if (CurrentCount != Data.Settings.QrcodePin)
        {
            navigationManager.NavigateTo("/");
        }
        if (!homeController.GetState())
        {
            navigationManager.NavigateTo("/");
        }*/
        //GenerateQRCode();
        //var tbl = Tables.Split(new char[] { ',' });
        //var tb = from t in tbl where t.Contains("-") select t;
        //var tb1 = from t in tbl where !t.Contains("-") select int.Parse(t);
        //tables = tb1.ToList<int>();

        //foreach (var tt in tb)
        //{
        //    var ttt = tt.Split("-");
        //    int start = int.Parse(ttt[0]);
        //    int end = int.Parse(ttt[1]);
        //    int start1 = Math.Min(start, end);
        //    int end1 = Math.Max(start, end);
        //    var tttt = Enumerable.Range(start1, end1 - start1 + 1);
        //    tables.AddRange(tttt);
        //}

        //var tbls = tables.Select(x => x).Distinct();
        //tables = tbls.ToList<int>();

        //QRTables = new List<QRTable>();
        //foreach (var table in tables)
        //{
        //    QRTables.Add(GenerateQRCode(table));
        //}
        //
        OnValidSubmit();
        restaurant.Name = "Please select your Venue";
        StateHasChanged();
    }


    public QRTable GenerateQRCode(int table)
    {

        string bit = $"{restaurant.bitly}/{restaurant.Id}/{table}";
        QRTable qrTable = new QRTable { Table = table, BitLy = bit };
        string QRCodeStr = "";
        //var zz = httpContextAccessor.HttpContext.Request;
        //string url = httpContextAccessor.HttpContext.Request.Scheme + "://" + httpContextAccessor.HttpContext.Request.Host.Value;
        //InputText = url + "";
        //qrTable.InputText = $"{TableTracewithQRCode.Data.Settings.BaseURL}/{table}";
        StateHasChanged();
        //var z = HttpContext.Request.UrlReferrer;
        //QRCodeStr = "";
        //return;
        if (!String.IsNullOrEmpty(qrTable.BitLy))
        {
            using (MemoryStream ms = new MemoryStream())
            {
                /* var uri = new Uri(Request.Url.AbsoluteUri);
                url = uri.Scheme + "://" + uri.Host + "/"; ente
                                 var y = Url.Content(Request.Url.PathAndQuery);
                var x = Request.Url.AbsoluteUri.ToString()

                //Url generator = new Url("https://github.com/codebude/QRCoder/");
                //string payload = generator.ToString();*/

                QRCodeGenerator qrGenerator = new QRCodeGenerator();
                QRCodeData qrCodeData = qrGenerator.CreateQrCode(qrTable.BitLy, QRCodeGenerator.ECCLevel.Q);
                QRCode qrCode = new QRCode(qrCodeData);
                using (Bitmap qrCodeImage = qrCode.GetGraphic(20))
                {
                    qrCodeImage.Save(ms, ImageFormat.Png);
                    QRCodeStr = "data:image/png;base64," + Convert.ToBase64String(ms.ToArray());
                }

            }
        }
        qrTable.Name = restaurant.Name;
        qrTable.QRCode = QRCodeStr;
        return qrTable;
    }



    void OnValidSubmit()
    {
        if (restaurant.Name == "Please select your Venue")
            return;
        if (restaurant.Name == "Busy: Please wait.")
            return;
        restaurant.QRTables = null;
        var tbl = restaurant.TablesCSV.Split(new char[] { ',' });
        var tb = from t in tbl where t.Contains("-") select t;
        var tb1 = from t in tbl where !t.Contains("-") select int.Parse(t);
        var Tables = tb1.ToList<int>();

        foreach (var tt in tb)
        {
            var ttt = tt.Split("-");
            int start = int.Parse(ttt[0]);
            int end = int.Parse(ttt[1]);
            int start1 = Math.Min(start, end);
            int end1 = Math.Max(start, end);
            var tttt = Enumerable.Range(start1, end1 - start1 + 1);
            Tables.AddRange(tttt);
        }

        var tbls = Tables.Select(x => x).Distinct();
        restaurant.Tables = tbls.ToList<int>();

        //Need an even number of tables
        int tablesCount = restaurant.Tables.Count();
        int maxTableNo = restaurant.Tables.Max();
        if ((tablesCount % 2) == 1)
            restaurant.Tables.Add(maxTableNo + 1);

        var QRTables = new List<QRTable>();
        foreach (var table in restaurant.Tables)
        {
            QRTables.Add(GenerateQRCode(table));
        }
        restaurant.QRTables = QRTables;
        StateHasChanged();
    }
}

